//const burgerPromise = new Promise(function(res, rej){
  //  setTimeout
//(() => {
  //      console.log("Burger is ready!");
   //     res("Burger");
//    }, 5000);
//});

// Promise

// fullfilled
// rejected
// pending

 // Promise { <pending> }

// setTimeout(() => {
//   console.log(burgerPromise);
// }, 6000);

// then - –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞ -> fullfilled
// catch - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É - –≤ —Å–ª—É—á–∞–µ reject -> rejected

// –†–∞—Å–∫—Ä—ã—Ç—å –ø—Ä–æ–º–∏—Å –±–µ–∑ —Å–µ—Ç —Ç–∞–π–º–∞—É—Ç

burgerPromise
  .then((burger) => {
    console.log(burger);
  })
  .catch((err) => {
    console.log(err);
  });

  const burgerPromise = new Promise(function(res, rej) {
  setTimeout(() => {
    const isReady = Math.random() > 0.5; // 70% chance it's ready
    if (isReady) {
      console.log("Burger is ready!");
      res("üçî Burger served");
    } else {
      console.log("Oops, the burger burned!");
      rej("üî• Burger failed");
    }
  }, 5000);
});

burgerPromise
  .then(result => console.log("Success:", result))
  .catch(error => console.log("Error:", error));

  const hopInterval = setInterval(() => {
  console.log("Hop!");
}, 3000);

setTimeout(() => {
  clearInterval(hopInterval); // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
}, 10000);